version: 2.1

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
         name: Install AWS CLI v2
         command: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

  install_ansible:
   description: Install Ansible
   steps:
     - run:
        name: Install Ansible
        command: |
          sudo apt update 
          sudo apt install software-properties-common -y
          sudo apt-add-repository --yes --update ppa:ansible/ansible
          sudo apt install ansible -y
  destroy-environment:
   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
   parameters:
    Workflow_ID:
      type: string
      default: ${CIRCLE_WORKFLOW_ID:0:7}
   steps:
    - run:
        name: Destroy environments
        when: on_fail
        command: |
          # Empty frontend bucket
          aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
          # Delete frontend stack
          aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
          # Delete backend stack
          aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
  install_nodejs:
   description: Install Node.js 13.8.0
   steps:
      - run:
          name: Install Node.js 13
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs


  revert-migrations:
    description: Revert the last migration, if any were executed during the current workflow
    parameters:
       Workflow_ID:
         type: string
         default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
       - run:
           name: Revert migrations
           when: on_fail
           command: |
             SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
             echo "$SUCCESS"
             if (( $SUCCESS == 1 ));
             then
               cd ~/project/backend
               npm install
               npm run migration:revert
             fi




jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build frontend
          command: |
           cd frontend
           npm install
           npm run build:prod
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
           cd backend
           npm install
           npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end unit test
          command: |
           cd frontend
           npm install
           npm test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end unit test
          command: |
           cd backend
           npm install
           npm test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
           cd frontend
           npm install
           npm audit fix --force --audit-level=critical
           npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end scan
          command: |
           cd backend
           npm install
           npm update
           npm audit fix --force --audit-level=critical
           npm audit fix --force --audit-level=critical
           npm audit fix --force --audit-level=critical
           npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
         name: Install dependencies
         command: |
           yum install -y tar gzip   
         
      - run:
         name: Ensure back-end infrastructure exists
         command: |
          aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
            
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             cd .circleci/ansible
             cat inventory.txt
             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text)
             echo $BACKEND_PUBLIC_IP >> inventory.txt
             cat inventory.txt
             #  echo ${BACKEND_PUBLIC_IP}   
      - persist_to_workspace:
          root: ~/
          paths:
          - project/.circleci/ansible/inventory.txt
      
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker: 
      - image: cimg/base:stable
    steps:
      - checkout

      - add_ssh_keys:
         fingerprints: ["2e:14:04:b7:8e:cf:3c:e5:bc:f9:02:d7:99:a1:b3:0b"]
      - attach_workspace:
         at: ~/
      - install_ansible
      - install_awscli
      - run:
         name: Configure Server
         command: |
          cd .circleci/ansible
          cat inventory.txt
          aws ec2 describe-instances --region us-west-2 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt

          ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker: 
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
    - checkout
    - install_awscli
    # - install_nodejs
    - restore_cache:
       keys: [backend-build]
    - run: 
       name: Run migrations
       command: |
        cd backend
        npm install
        npm run premigrations
        npm run migrations > migrations_dump.txt
        cat migrations_dump.txt
    - run:
       name: Send migration status to kvdb.io
       command: |
         if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
         then
           curl http://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
         else
           echo "No migrations are pending" 
         fi    
     
    - destroy-environment
    - revert-migrations

     # Here's where you will add some code to rollback on failure   

  deploy-frontend:
    docker: 
      - image: cimg/base:stable
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
               fingerprints: ["2e:14:04:b7:8e:cf:3c:e5:bc:f9:02:d7:99:a1:b3:0b"] # Checkout code from git
      - attach_workspace:
         at: ~/
      - install_awscli
      - install_nodejs 
      - install_ansible
      - restore_cache:
         keys: [backend-build]  
      # - run:
      #     name: Install dependencies
      #     command: |
      #       cd frontend
      #       npm install
      
      - run:
         name: Get backend url
         command: |
          export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-west-2 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          export "API_URL=http://${BACKEND_PUBLIC_IP}:3030"
          echo "API_URL = ${API_URL}"
          echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
          cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            sudo npm install -g npm@latest
            rm -rf node_modules
            npm install
            npm run build:prod
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations


  deploy-backend:
    docker:
       - image: cimg/base:stable
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
         fingerprints: ["2e:14:04:b7:8e:cf:3c:e5:bc:f9:02:d7:99:a1:b3:0b"]
      - attach_workspace:
         at: ~/
      - install_nodejs
      - install_ansible
      - install_awscli
      - run:
          name: Deploy backend
          command: |
           cd backend
           npm i
           npm run build
           cd ..
           cd .circleci/ansible
           mkdir files
           cd files
           tar -C ../../../backend -czvf artifact.tar.gz .
           cd ../                   
           cat inventory.txt
           ansible-playbook -i inventory.txt deploy-backend.yml      
      
      - destroy-environment
      - revert-migrations
          #  cd backend
          #  npm i
          #  npm run build
          #  cd ..
          #  cd .circleci/ansible
          #  mkdir files
          #  cd files
          #  tar -C ../../../backend -czvf artifact.tar.gz .
          #  cd ../                   
          #  cat inventory.txt
          #  ansible-playbook -i inventory.txt deploy-backend.yml      

      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
           requires: [build-frontend]
      - test-backend:
           requires: [build-backend]
      - scan-backend:
           requires: [build-backend]
      - scan-frontend:
           requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
           requires: [configure-infrastructure]
      - deploy-frontend:
           requires: [run-migrations]
      - deploy-backend:
           requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
